"""convert lower case to uppercase"""
directive @upper on FIELD_DEFINITION

"""required Authorization header with valid Access Token"""
directive @auth on FIELD_DEFINITION

"""required Authorization header with valid Access Token and Admin role"""
directive @admin on FIELD_DEFINITION

"""required Authorization header with valid access key & secret key"""
directive @serviceAccount on FIELD_DEFINITION

type AllBillboardsDoc {
    billboards: [Billboard!]
    total: Int!
}

union AllBillboardsResults = AllBillboardsDoc | InternalServerError | NotFound

union BillboardResults = Billboard | InternalServerError | AuthTokenError | BadUserInput | NotFound

input createBillboardInput {
    label: String!
    redirectTo: String!
    description: String
    category: ObjectID
    archived: Boolean
}

input updateBillboardInput {
    label: String
    redirectTo: String
    description: String
    category: ObjectID
    archived: Boolean
}

type Query {
    getAllBillboards(skip: FilterSkip, limit: FilterLimit, searchText: String, category: ObjectID): AllBillboardsResults!
    shoppingCart: shoppingCartResults!

    """get a single product category by id"""
    getCategory(id: ObjectID!): getCategoryResults!

    """
    get all product categories with pagination and filter to get subcategories of a parent category
    """
    getAllCategories(skip: FilterSkip, limit: FilterLimit, parentCategory: ObjectID, searchText: String): AllCategoriesResults!
    hello: protected
    myOrders(skip: FilterSkip, limit: FilterLimit): myOrdersResults
    getAllProducts(skip: FilterSkip, limit: FilterLimit, searchText: String, category: ObjectID): getAllProductResults!
    getProduct(slug: String, id: String): ProductResults!
    countries: [ShippingCountry!]
    getUser: userResults!
    loginWithPassword(email: Email!, password: String!): LoginResults!
}

type Mutation {
    createBillboard(form: createBillboardInput!): BillboardResults!
    updateBillboard(form: updateBillboardInput!, id: ObjectID!): BillboardResults!
    deleteBillboard(id: ObjectID!): DeleteResults
    addToCart(form: CartInput!): shoppingCartResults!

    """
    change quantity of product in cart or remove product from cart if quantity is 0
    """
    updateCart(form: CartInput!): shoppingCartResults!
    emptyCart: shoppingCartResults!

    """add a new product category"""
    addProductCategory(form: CategoryInput!): AddCategoryResults!
    createOrder(payment: PaymentMethod!, address: ObjectID!): OrderResults!
    addProduct(form: ProductInput!): ProductResults!
    updateProduct(id: ObjectID!, form: UpdateProductInput!): ProductResults!
    removeProducts(ids: [ObjectID!]!): DeleteResults
    insertProductItems(id: ObjectID!, items: [ProductItemInput!]!): ProductResults!
    removeProductItem(id: ObjectID!, itemId: ObjectID!): ProductResults!
    addShippingCountry(form: ShippingCountryInput!): ShippingCountryResult!
    removeShippingCountry(code: CountryCode!): DeleteResults!
    updateUser(form: UpdateUserInput!): userResults!
    addShippingAddress(form: ShippingAddressInput!): shippingAddressResults!
    updateShippingAddress(id: ID!, form: ShippingAddressUpdateInput!): shippingAddressResults!
    deleteShippingAddress(id: ID!): DeleteResults!
}

type Billboard {
    id: ObjectID!
    label: String!
    redirectTo: String
    image: String!
    description: String
    category: String
    createdOn: DateTimeISO!
    archived: Boolean!
    imageUploadUrl(count: Int!): ImageUploadUrlsResult
}

union shoppingCartResults = shoppingCart | AuthTokenError | BadUserInput | InternalServerError | NotFound

input CartInput {
    productItemId: ObjectID!
    quantity: Int!
}

type CartItem {
    id: ObjectID!

    """Product item id in the cart"""
    productItemId: ObjectID!
    name: String!
    description: String!
    quantity: Int!
    images: [URL!]
    price: NonNegativeFloat!
    sellPrice: NonNegativeFloat
    freeDelivery: Boolean
    averageRating: Int
    reviewsCount: Int
    archived: Boolean
    sku: String
    slug: String!
    productId: ObjectID!
}

type CartItemDocs {
    total: Int!
    cartItems: [CartItem!]!
}

type shoppingCart {
    id: ObjectID!
    items(skip: FilterSkip = 0, limit: FilterLimit = 10, searchText: String): CartItemDocs!
}

union AddCategoryResults = ProductCategory | AuthTokenError | ProductCategoryError | BadUserInput | NotFound | InternalServerError

union getCategoryResults = ProductCategory | ProductCategoryError | NotFound | InternalServerError

union AllCategoriesResults = AllCategoriesDoc | ProductCategoryError | NotFound

input CategoryInput {
    name: String!
    description: String!
    parentCategory: ObjectID
    published: Boolean
}

type PartialProductCategory {
    id: ObjectID!
    name: String!
    description: String
    image: String
}

type ProductCategory {
    id: ObjectID!
    name: String!
    fullPath: String!
    description: String
    parentCategory: PartialProductCategory
    image: String
    imageUploadUrl(count: Int!): ImageUploadUrlsResult
}

type ProductCategoryError implements Error {
    code: Int!
    message: String!
}

type AllCategoriesDoc {
    total: Int!
    categories: [ProductCategory!]
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

"""The `Byte` scalar type represents byte value as a Buffer"""
scalar Byte

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A time string at UTC, such as 10:15:30Z, compliant with the `full-time` format outlined in section 5.6 of the RFC 3339profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Time

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

"""
A field whose value exists in the standard IANA Time Zone Database: https://www.iana.org/time-zones
"""
scalar TimeZone

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

"""
A field whose value is a UTC Offset: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
"""
scalar UtcOffset

"""
A string representing a duration conforming to the ISO8601 standard,
such as: P1W1DT13H23M34S
P is the duration designator (for period) placed at the start of the duration representation.
Y is the year designator that follows the value for the number of years.
M is the month designator that follows the value for the number of months.
W is the week designator that follows the value for the number of weeks.
D is the day designator that follows the value for the number of days.
T is the time designator that precedes the time components of the representation.
H is the hour designator that follows the value for the number of hours.
M is the minute designator that follows the value for the number of minutes.
S is the second designator that follows the value for the number of seconds.

Note the time designator, T, that precedes the time value.

Matches moment.js, Luxon and DateFns implementations
,/. is valid for decimal places and +/- is a valid prefix
"""
scalar Duration

"""
A string representing a duration conforming to the ISO8601 standard,
such as: P1W1DT13H23M34S
P is the duration designator (for period) placed at the start of the duration representation.
Y is the year designator that follows the value for the number of years.
M is the month designator that follows the value for the number of months.
W is the week designator that follows the value for the number of weeks.
D is the day designator that follows the value for the number of days.
T is the time designator that precedes the time components of the representation.
H is the hour designator that follows the value for the number of hours.
M is the minute designator that follows the value for the number of minutes.
S is the second designator that follows the value for the number of seconds.

Note the time designator, T, that precedes the time value.

Matches moment.js, Luxon and DateFns implementations
,/. is valid for decimal places and +/- is a valid prefix
"""
scalar ISO8601Duration

"""
A local date string (i.e., with no associated timezone) in `YYYY-MM-DD` format, e.g. `2020-01-01`.
"""
scalar LocalDate

"""
A local time string (i.e., with no associated timezone) in 24-hr `HH:mm[:ss[.SSS]]` format, e.g. `14:25` or `14:25:06` or `14:25:06.123`.
"""
scalar LocalTime

"""
A local date-time string (i.e., with no associated timezone) in `YYYY-MM-DDTHH:mm:ss` format, e.g. `2020-01-01T00:00:00`.
"""
scalar LocalDateTime

"""
A local time string (i.e., with no associated timezone) in 24-hr `HH:mm[:ss[.SSS]]` format, e.g. `14:25` or `14:25:06` or `14:25:06.123`.  This scalar is very similar to the `LocalTime`, with the only difference being that `LocalEndTime` also allows `24:00` as a valid value to indicate midnight of the following day.  This is useful when using the scalar to represent the exclusive upper bound of a time block.
"""
scalar LocalEndTime

"""
A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
"""
scalar EmailAddress

"""
A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
"""
scalar UUID

"""
A field whose value is a hexadecimal: https://en.wikipedia.org/wiki/Hexadecimal.
"""
scalar Hexadecimal

"""
A field whose value is a hex color code: https://en.wikipedia.org/wiki/Web_colors.
"""
scalar HexColorCode

"""
A field whose value is a CSS HSL color: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#hsl()_and_hsla().
"""
scalar HSL

"""
A field whose value is a CSS HSLA color: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#hsl()_and_hsla().
"""
scalar HSLA

"""
A field whose value is an International Bank Account Number (IBAN): https://en.wikipedia.org/wiki/International_Bank_Account_Number.
"""
scalar IBAN

"""
A field whose value is either an IPv4 or IPv6 address: https://en.wikipedia.org/wiki/IP_address.
"""
scalar IP

"""
A field whose value is a IPv4 address: https://en.wikipedia.org/wiki/IPv4.
"""
scalar IPv4

"""
A field whose value is a IPv6 address: https://en.wikipedia.org/wiki/IPv6.
"""
scalar IPv6

"""
A field whose value is a ISBN-10 or ISBN-13 number: https://en.wikipedia.org/wiki/International_Standard_Book_Number.
"""
scalar ISBN

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

"""
A field whose value is a valid decimal degrees latitude number (53.471): https://en.wikipedia.org/wiki/Latitude
"""
scalar Latitude

"""
A field whose value is a valid decimal degrees longitude number (53.471): https://en.wikipedia.org/wiki/Longitude
"""
scalar Longitude

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

"""
A field whose value is a IEEE 802 48-bit MAC address: https://en.wikipedia.org/wiki/MAC_address.
"""
scalar MAC

"""Floats that will have a value less than 0."""
scalar NegativeFloat

"""Integers that will have a value less than 0."""
scalar NegativeInt

"""A string that cannot be passed as an empty value"""
scalar NonEmptyString

"""Floats that will have a value of 0 or more."""
scalar NonNegativeFloat

"""Integers that will have a value of 0 or more."""
scalar NonNegativeInt

"""Floats that will have a value of 0 or less."""
scalar NonPositiveFloat

"""Integers that will have a value of 0 or less."""
scalar NonPositiveInt

"""
A field whose value conforms to the standard E.164 format as specified in: https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.
"""
scalar PhoneNumber

"""
A field whose value is a valid TCP port within the range of 0 to 65535: https://en.wikipedia.org/wiki/Transmission_Control_Protocol#TCP_ports
"""
scalar Port

"""Floats that will have a value greater than 0."""
scalar PositiveFloat

"""Integers that will have a value greater than 0."""
scalar PositiveInt

"""
A field whose value conforms to the standard postal code formats for United States, United Kingdom, Germany, Canada, France, Italy, Australia, Netherlands, Spain, Denmark, Sweden, Belgium, India, Austria, Portugal, Switzerland or Luxembourg.
"""
scalar PostalCode

"""
A field whose value is a CSS RGB color: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba().
"""
scalar RGB

"""
A field whose value is a CSS RGBA color: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba().
"""
scalar RGBA

"""
The `SafeInt` scalar type represents non-fractional signed whole numeric values that are considered safe as defined by the ECMAScript specification.
"""
scalar SafeInt

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

"""A currency string, such as $21.25"""
scalar USCurrency

"""
A field whose value is a Currency: https://en.wikipedia.org/wiki/ISO_4217.
"""
scalar Currency

"""
In the US, an ABA routing transit number (`ABA RTN`) is a nine-digit code to identify the financial institution.
"""
scalar RoutingNumber

"""
Banking account number is a string of 5 to 17 alphanumeric values for representing an generic account number
"""
scalar AccountNumber

"""
A field whose value conforms to the standard cuid format as specified in https://github.com/ericelliott/cuid#broken-down
"""
scalar Cuid

"""A field whose value is a Semantic Version: https://semver.org"""
scalar SemVer

"""Floats that will have a value of 0 or more."""
scalar UnsignedFloat

"""Integers that will have a value of 0 or more."""
scalar UnsignedInt

"""
A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
"""
scalar GUID

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar Long

"""
A field whose value conforms with the standard mongodb object ID as described here: https://docs.mongodb.com/manual/reference/method/ObjectId/#ObjectId. Example: 5e5677d71bdc2ae76344968c
"""
scalar ObjectID

"""Represents NULL values"""
scalar Void

"""
A field whose value conforms to the standard DID format as specified in did-core: https://www.w3.org/TR/did-core/.
"""
scalar DID

"""A country code as defined by ISO 3166-1 alpha-2"""
scalar CountryCode

"""The locale in the format of a BCP 47 (RFC 5646) standard string"""
scalar Locale

"""
A field whose value conforms to the standard DeweyDecimal format as specified by the OCLC https://www.oclc.org/content/dam/oclc/dewey/resources/summaries/deweysummaries.pdf
"""
scalar DeweyDecimal

"""
A field whose value conforms to the Library of Congress Subclass Format ttps://www.loc.gov/catdir/cpso/lcco/
"""
scalar LCCSubclass

"""
A field whose value is an IPC Class Symbol within the International Patent Classification System: https://www.wipo.int/classifications/ipc/en/
"""
scalar IPCPatent

"""Email custom scalar type"""
scalar Email

"""Performs input checking in skip field"""
scalar FilterSkip

"""Performs input checking in limit field"""
scalar FilterLimit

interface Error {
    code: Int!
    message: String!
}

type AuthTokenError implements Error {
    code: Int!
    message: String!
}

type InternalServerError implements Error {
    code: Int!
    message: String!
}

type NotFound implements Error {
    code: Int!
    message: String!
}

type Success {
    payload: String
}

union protected = AuthTokenError | Success

union DeleteResults = Success | InternalServerError | BadUserInput | NotFound

union OrderResults = Order | InternalServerError | NotFound | BadUserInput

union myOrdersResults = OrdersDoc | InternalServerError | BadUserInput

type CreateOrderInput {
    id: ID!
    quantity: Int!
    price: Float!
}

type OrdersDoc {
    orders: [Order!]!
    total: Int!
}

type OrderItem {
    id: ID!
    product: ProductItem!
    quantity: Int!

    """The cost of the product at the time of the order"""
    price: NonNegativeFloat!
}

enum PaymentMethod {
    CASH
    CARD
    PAYPAL
    UPI
}

enum OrderStatusEnum {
    """Order has been placed but not yet accepted by the seller"""
    PLACED

    """Order has been accepted by the seller but not yet paid for"""
    PROCESSING

    """Order has been shipped but not yet delivered"""
    SHIPPED

    """Order has been delivered to the customer and payment has been received"""
    DELIVERED

    """Order has been cancelled by the customer or the seller"""
    CANCELLED
}

type OrderStatus {
    id: ObjectID!
    status: OrderStatusEnum!
    createdAt: String!
    remark: String
}

type OrderItemsDoc {
    total: Int!
    items: [OrderItem!]!
}

type OrderShipment {
    shippingAddress: ShippingAddress!
    trackingId: String
    shippedVia: String
    deliveryCharge: NonNegativeFloat
}

type Order {
    id: ID!
    createdAt: DateTimeISO!
    user: PartialUser!
    isPaid: Boolean!
    paymentMethod: PaymentMethod!
    paymentDetails: JSON
    status: [OrderStatus!]!
    totalItems: Int!
    orderItems: OrderItemsDoc!
    total: NonNegativeFloat!
    shipment: OrderShipment!
}

union ProductResults = Product | ProductError | BadUserInput | NotFound

union addProductResults = Product | ProductError | BadUserInput | NotFound | AuthTokenError

union getAllProductResults = getAllProductsDoc | ProductError | BadUserInput

input ProductInput {
    name: String!
    description: String!
    price: NonNegativeFloat!
    sellPrice: NonNegativeFloat
    slug: String!
    tags: [String!]
    sku: String!
    category: ObjectID!
    archived: Boolean
    featured: Boolean
    quantity: PositiveInt
}

input UpdateProductInput {
    name: String
    description: String
    price: NonNegativeFloat
    sellPrice: NonNegativeFloat
    slug: String
    tags: [String!]
    sku: String
    category: ObjectID
    archived: Boolean
    featured: Boolean
    quantity: PositiveInt
}

input ProductItemInput {
    price: NonNegativeFloat!
    sku: String!
    quantity: PositiveInt!
    combination: [String!]
    description: String
    archived: Boolean
}

type ImageUploadUrls {
    urls: [URL!]!
    total: Int!
}

union ImageUploadUrlsResult = ImageUploadUrls | AuthTokenError | BadUserInput

type ProductReview {
    id: ObjectID!
    createdOn: DateTimeISO!
    rating: Int!
    user: User!
    comment: String!
}

type ProductReviews {
    reviews: [ProductReview!]!
    total: Int!
}

type Product {
    id: ObjectID!
    name: String!
    category: ProductCategory!
    createdOn: DateTimeISO!
    lastUpdated: DateTimeISO!
    description: String!
    images: [URL!]
    archived: Boolean
    featured: Boolean
    slug: String!
    tags: [String!]
    averageRating: Int
    reviewsCount: Int
    freeDelivery: Boolean
    productReviews(skip: FilterSkip, limit: FilterLimit): ProductReviews
    itemsList(skip: FilterSkip, limit: FilterLimit): ProductItemsDoc
    imageUploadUrl(count: Int!): ImageUploadUrlsResult
}

type ProductConfig {
    name: String!
    value: String!
}

type ProductItemsDoc {
    items: [ProductItem!]!
    total: Int!
}

type ProductItem {
    id: ObjectID!
    sku: String!
    name: String!
    description: String!
    quantity: Int!
    price: NonNegativeFloat!
    sellPrice: NonNegativeFloat
    createdOn: DateTimeISO!
    images: [URL!]
    archived: Boolean
    config: [ProductConfig!]
}

type getAllProductsDoc {
    products: [Product!]!
    total: Int!
}

type ProductError implements Error {
    code: Int!
    message: String!
}

enum UserRole {
    admin
    user
}

enum Gender {
    male
    female
    others
}

type User {
    id: ObjectID!
    name: String!
    email: String!
    role: UserRole!
    phone: String
    dialCode: String
    gender: Gender
    emailVerified: Boolean!
    lastLogin: Date
    addresses: [ShippingAddress!]
}

type PartialUser {
    id: ObjectID!
    name: String!
    email: String!
    phone: String
    dialCode: String
}

type ShippingAddress {
    id: ObjectID
    isDefault: Boolean!
    countryCode: CountryCode!
    fullname: String
    phone: String
    dialCode: String
    street: String
    addressLine1: String
    addressLine2: String
    landmark: String
    town_city: String
    state_province: String
}

type ShippingCountry {
    name: String!
    countryCode: CountryCode!
}

type BadUserInput implements Error {
    code: Int!
    message: String!
}

union userResults = User | AuthTokenError | NotFound | BadUserInput

union shippingAddressResults = ShippingAddress | AuthTokenError | BadUserInput | NotFound

union LoginResults = LoginDoc | BadUserInput | NotFound

type LoginDoc {
    user: User!
    token: String
}

input UpdateUserInput {
    name: String
    password: String
    gender: Gender
    phone: String
    dialCode: String
}

input ShippingAddressInput {
    isDefault: Boolean!
    countryCode: CountryCode!
    fullname: String!
    phone: String!
    dialCode: String!
    street: String!
    addressLine1: String!
    addressLine2: String!
    landmark: String!
    town_city: String!
    state_province: String!
}

input ShippingAddressUpdateInput {
    isDefault: Boolean
    countryCode: CountryCode
    fullname: String
    phone: String
    dialCode: String
    street: String
    addressLine1: String
    addressLine2: String
    landmark: String
    town_city: String
    state_province: String
}

input ShippingCountryInput {
    name: String!
    countryCode: CountryCode!
}

union ShippingCountryResult = ShippingCountry | InternalServerError | BadUserInput | NotFound | AuthTokenError